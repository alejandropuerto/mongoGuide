/*Comandos más básicos de MongoDB*/

// Define variables: 
> var potion = {
	"name": "Invisibility", // Each field is separated by a comma 
	"vendor": "Kettlecooked"
	}

// Access the variable to see it content:
> potion

// Inserting fields and/or values in a collection. The collection will be created automatically when we first insert a document.
> db.potions.insert({ "name": "Invisibility", "vendor": "Kettlecooked" })

// We use find() to get the info about the documents in the collection:
> db.potions.find()

// When we insert a document, the id can be specified by us or it can be generated automatically by mongo.

// We use find() and adding the field and its value to perform a query to see the info of the search:
> db.potions.find({ "name": "Invisibility" })

// We can add price, score, date, lists, and embedded documents:
> db.potions.insert(
	{	"name": "Invisibility", 
		"vendor": "Kettlecooked",
		"price": 10.99,
		"score": 59,
		"tryDate": new Date(2012, 8, 13), /*Format: (Year, Month, Day)*/
		"ingredients": ["new toes", 42, "laughter"],
		"ratings": {"strength": 2, "flavor": 5}
	})

// We can delete a document using remove() if it matches with some parameter that we specify:
	> db.potions.remove({"name": "Love"}) //The parameter is name.

// We use update() to apply changes to some values of our document's fields:
	> db.potions.update({"name": "Love"}, {"$set": {"price": 3.99}}) //The price value is updated using "$set" to specify the field that we are going to update. If we do not use "$set", all the fields will be updated but the ids of the document.

// We can use "multi" parameter with update() to modify all matching documents:
	> db.potions.update({"vendor": "KC"}, {"$set": {"vendor": "Kettlecooked"}}, {"multi": true})

// We create a log document to record the views or clicks on it by adding the "count" field:
	> db.logs.update({"potion": "Shrinking"}, {"$inc": {"count": 1}}) //With "$inc" we increase the count of an existing log document and updates or creates the count field if exists or not.

// We can use "upsert" parameter with update() to create a new document usign the parameters of the query. It is used with the log document query:
	> db.logs.update({"potion": "Love"}, {"$inc": {"count": 1}}, {"upsert": true}) //If upsert is true, it creates a new document; if not, then updates the existing log document.

// We can remove fields that we don't need using the parameter "$unset" along with update():
	> db.potions.update({}, {"$unset":{"color":""}}, {"multi":true}) // The color field is removed
//Also we can rename fields:
	> db.potions.update({}, {"$rename": {"score": "grade"}}, {"multi": true}) //he score field is renamed with grade.

//To update a value of an array, we use "$set", but we have to specify the position of the value in the array of a single document as follows:
	> db.potions.update({"name": "Shrinking"}, {"$set": {"ingredients.1": 42}}) //The value of the array in position 1 will change to 42.

// To update the value of different positions in the array of more than 1 document, we use a palceholder instead of the number of the position in the array:
	> db.potions.update({"ingredients": "secret"}, {"$set": {"ingredients.$": 42}}, {"multi": true}) //We have to specify the query that we want to make the change, in this case, the query is the secret ingredient.

//To change values of embedded documents or dictionaries, it is similar, but instead of specify the number, we specify the name of the field:
	> db.potions.update({"name": "Shrinking"}, {"$set": {"ratings.strength": 5}})

/* Useful operators for using with update():
	$max - Updates if new value is greater than current or inserts if empty.
	$min - Updates if new value is less than current or inserts if empty.
	$mul - Multiplies current field value by specified value. If empty, inserts 0. */

// To remove the first or last value of an array we use "$pop" with update():
	> db.potions.update({"name": "Shrinking"}, {"$pop": {"categories": 1}}) // 1 removes the last element, and -1 the first one

// To add a value at the end of the array, we use "$push" and the value is added at the end:
	> db.potions.update({"name": "Shrinking"}, {"$push": {"categories": "budget"}})

// To add a unique value to an array, we use "$addToSet" and it add a value if it is not already in the array:
	> db.potions.update({"name": "Shrinking"}, {"$addToSet": {"categories": "budget"}})

// To remove any value and its instances (if not unique) from the array, we use "$pull":
	> db.potions.update({"name": "Shrinking"}, {"$pull": {"categories": "tasty"}})

/* Filters - Query Operators */

// To query with multiple criteria, we use find() in comma-separated query:
	> db.potions.find({"vendor": "Kettlecooked", "ratings.strength": 5}) //In this case, it will only show potions made by Kettlecooked that have strength of 5.

// Conditions - Common comparisons
	$gt - greater than
	$gte - greater than or equal to
	$lt - less than
	$lte - less than or equal to
	$ne - not equal to

//Some examples
//Finding potions that are less than $20
	> db.potions.find({"price": {"$lt": 20}}) //price less than 20
//Finding potions between prices
	> db.potions.find({"price": {"$gt":10,"$lt":20}}) //price greater than 10 and less than 20
//Queries of non-equality
	> db.potions.find({"vendor": {"$ne": "Brewers"}}) //vendor not equal to "brewers"
//Range queries on an array
	> db.potions.find({"sizes": {"$elemMatch": {"gt": 8, "lt": 16}}}) // at least 1 value in an array must be greater than 8 and less than 16

// To specify what values or fields do we want to get back when performing find():
	> db.mongo.find({"grade": {"$gte": 80}}, {"vendor": true, "name": true}) //this will get back only the vendor and name fields, as well as the id field, unless we set false in the id field.
	> db.mongo.find({"grade": {"$gte": 80}}, {"vendor": true, "name": true, "_id": false}) //this will not get back the id.
	> db.mongo.find({"grade": {"$gte": 80}}, {"vendor": false, "price": false}) // this will exclude the vendor and price fields from getting back.
	//we cannot set true and false fields at the same time, because it will cause an error; the only case we will performed this, is when we want either to include or exclude the id field.

//When we use find(), and there are more than 20 documents, we type "it" to view the next 20 documents, because MongoDB only displays 20 each time.

//To know how many documents we have, we can use count() along with find() to know it:
	> db.potions.find().count()

// To sort our documents, we use the cursor method sort(), and inside we specify the field wich we want to sort:
	> db.potions.find().sort({"price": 1}) //-1 is to order descending, and 1 is to order ascending. In this case, the potions will be sorted by price in ascending order.

//We can limit the number of documents we get back when performing find():
	> db.potions.find().limit(3) //in this case, we will only see the first 3 documents.

// We can skip docuements when displaying them:
	> db.potions.find().skip(3) // the first 3 documents will be skipped, and we will see the documents after the first 3.

//We can use skip and limit at the same time:
	> db.potions.find().skip(3).limit(3)


/* Data Modeling */

//We use arrays to hold multiple values of a field.
//We can insert more data of a field, for example, a vendor; and this can be done by inserting the data as an embedded document. For example: {"id": objectid(), "name": "Invisivility", "vendor": {"name": "Kettlecooked",, "phone": 5555555, "organic": true}}
// To avoid having duplicate information, in this case, vendor, we can create a vendors collection and reference the vendor document in each potion document. This will convert the id object numbers, into the name of the vendor.
	> db.vendors.insert({"_id": "Kettlecooked", "phone": 555555555, "organic": true}) //We can specify the unique _id of document
	> db.potions.insert({"name": "Invisibility", "vendor_id": "Kettlecooked"}) //Here we reference the vendor document into the potion document.
/*Querying a referenced document */
	>db.potions.find({"name": "Invisibility"}) //We get the potion information & we get the vendor _id
	> db.potions.find({"_id": "kettlecooked"}) // We get the vendor information



/*
### FAQ MongoDB ###

1. What is ObjectId composed of?
	ObjectId in MongoDB is a 12-byte BSON type which has all the following:
 	    -4-byte value representing seconds/Timestamp
	    -3-byte Client machine ID
	    -2-byte Client process ID
	    -3 byte incremented counter

2. What is "namespace" in MongoDB?
	MongoDB stores BSON (Binary Interchange and Structure Object Notation) objects in the collection. The concatenation of the collection name and database name is called a namespace. 

3. Where can we use MongoDB?
	There are mainly 3 uses of MongoDB:
	    -We use MongoDB as the primary data store for operational applications with real-time requirements. MongoDB is fit to use for 60%-80% of the applications that are developing in today’s world. It is easy to operate and scale in ways that are hard.

	    -MongoDB is very helpful in many cases where the relational database is not fit for its usage, like scenarios where we want to use unstructured, semi-structured and polymorphic data, it is also fit to be used for applications with large scalability requirements or multi-data center deployments.

	    -Some common places where MongoDB examples include are mobile apps, product catalog, real-time personalization, content management and applications built around the relational data model and SQL.

4. Differences between MongoDB and MySQL?
	Both these databases are free and open source. There is a lot of difference between these two databases in terms of data representation, relationship, transaction, querying data, schema design and definition, performance speed, normalization and many more. The speed in which your queries are being processed in MongoDB is fast as compared to MySQL. The way in which data is being represented in MongoDB and MySQL is also very different. MySQL has only structured and table formatted data whereas MongoDB is having unstructured and comma separated data in them.

5. How to use the primary key in MongoDB?
	_id field is reserved for the primary key in MongoDB, and that is a unique value. If you don’t set anything to _id it will automatically fill it with “MongoDB Id Object”. But you can put any unique info in that field.

6. How to delete everything from the MongoDB database?
	For deleting everything from the MongoDB database, you can use the following code:
	    use [database];
	    db.dropDatabase();
	    Ruby code should be pretty similar.
	    Also, from the command line:
	    mongo [database] –eval “db.dropDatabase();”
	    Use
	    [databaseName]
	    db.Drop+databaseName();
	    drop collection
	    use databaseName
	    db.collectionName.drop();

7. Explain about replication and when should we use it?
	 Replication is the process of synchronizing data across multiple servers so that data is not lost in any condition. It gives redundancy and rises data availability with many copies of data on other database servers. We can use it for various purposes like for keeping the data safe, for high availability of data, disaster recovery and in no downtime for maintenance.

8. How to update _id of one MongoDB Document?
	You’ll have to save the document using a new _id, and then remove the old document.
	    // store the document in a variable
	    doc = db.clients.findOne({_id: ObjectId(“4cc45467c55f4d2d2a000002”)})
	    // set a new _id on the document
	    doc._id = ObjectId(“4c8a331bda76c559ef000004”)
	    // insert the document, using the new _id
	    db.clients.insert(doc)
	    // remove the document with the old _id
	    db.clients.remove({_id: ObjectId(“4cc45467c55f4d2d2a000002”)})
	To do it for your whole collection you can also use a loop
		    db.status.find().forEach(function(doc){ var id=doc._id; doc._id=doc.UserId; db.status.insert(doc); db.status.remove({_id:id});})
	In this case, UserId was the new ID I wanted to use

9. PHP with MongoDB, doubt with consulting
	We need to cast the variable, because mongo infers the data type:
		$edades = $bd->command(
			array(
	    		"distinct" => "personas",
	    		"key"      => "edad",
	    		"query"    => array("edad" => array('$gte' => intval($num) ))
	  		)
		);

10. What is the size limit of a document on MongoDB?
	MongoDB allows only 16 MB for each document

11. How many indexes by default we can create for a new collection in MongoDB?
	By default, MongoDB created the _id collection for each and every collection.

12. Explain about GridFS in MongoDB.
	 GridFS is a specification for storage and retrieval of files that crosses the BSON document size limit of 16MB. Instead of storing all files in a single document GridFS divides a file into small parts or chunks and stores each chunk as a separate document.

13. Which languages are being supported by MongoDB?
	The languages being supported by MongoDB are C, C++, C#, Java, Node.js, Perl, PHP, Python, Ruby, Scala, Go and Erlang. All these languages are having driver support from MongoDB.

14. By what reason is MongoDB the best?
	MongoDB is considered to be the best NoSQL database because of the following points:
	    -Document-oriented
	    -High Performance
	    -High Availability
	    -Easy Scalability
	    -Rich query languages

15. Explain why MongoDB data files are large in size?
	MongoDB doesn’t follow file system fragmentation and pre-allocates data files to reserve space while setting up the server. That’s why MongoDB data files are large in size.

References:
https://data-flair.training/blogs/mongodb-interview-questions/
https://data-flair.training/blogs/interview-questions-for-mongodb/
https://www.guru99.com/mongodb-interview-questions.html
https://es.stackoverflow.com/questions/16551/php-con-mongo-dudas-con-consultas/16614#16614
*/