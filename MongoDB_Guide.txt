Comandos más básicos de MongoDB

## Define variables: 
> var potion = {
	"name": "Invisibility", # Each field is separated by a comma 
	"vendor": "Kettlecooked"
	}

## Access the variable to see it content:
> potion

## Inserting fields and/or values in a collection. The collection will be created automatically when we first insert a document.
> db.potions.insert({ "name": "Invisibility", "vendor": "Kettlecooked" })

## We use find() to get the info about the documents in the collection:
> db.potions.find()

## When we insert a document, the id can be specified by us or it can be generated automatically by mongo.

## We use find() and adding the field and its value to perform a query to see the info of the search:
> db.potions.find({ "name": "Invisibility" })

## We can add price, score, date, lists, and embedded documents:
> db.potions.insert(
	{
		"price": 10.99,
		"score": 59,
		"tryDate": new Date(2012, 8, 13) #Format: (Year, Month, Day)
		"ingredients": ["new toes", 42, "laughter"],
		"ratings": {"strength": 2, "flavor": 5}
	})

## We can delete a document using remove() if it matches with some parameter that we specify:
	> db.potions.remove({"name": "Love"}) #The parameter is name.

## We use update() to apply changes to some values of our document's fields:
	> db.potions.update({"name": "Love"}, {"$set": {"price": 3.99}}) #The price value is updated using "$set" to specify the field that we are going to update. If we do not use "$set", all the fields will be updated but the ids of the document.

## We can use "multi" parameter with update() to modify all matching documents:
	> db.potions.update({"vendor": "KC"}, {"$set": {"vendor": "Kettlecooked"}}, {"multi": true})

## We create a log document to record the views or clicks on it by adding the "count" field:
	> db.logs.update({"potion": "Shrinking"}, {"$inc": {"count": 1}}) #With "$inc" we increase the count of an existing log document and updates or creates the count field if exists or not.

## We can use "upsert" parameter with update() to create a new document usign the parameters of the query. It is used with the log document query:
	> db.logs.update({"potion": "Love"}, {"$inc": {"count": 1}}, {"upsert": true}) #If upsert is true, it creates a new document; if not, then updates the existing log document.